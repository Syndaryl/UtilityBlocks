buildscript {
    repositories {
        //mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
	maven {
		name= "applecore"
		url "http://www.ryanliptak.com/maven/"
	}
        //maven {
        //    name = "sonatype"
        //    url = "https://oss.sonatype.org/content/repositories/snapshots/"
        //}
    }
    dependencies {
        //classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
version = config.mod_version
group= "org.syndaryl.utilityblocks" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "[" + config.minecraft_version + "]UtilityBlocks"

minecraft {
    //version = "1.8-11.14.0.1238-1.8"

    version = config.minecraft_version + "-" + config.forge_version // grab latest forge

	replace "\${version}", config.mod_version
	//replaceIn "NamespaceManager.java"
	replaceIn "UtilityBlocks.java"


    if (file('../run').exists()) {
        runDir = "../run/assets"
    }
    else
    {
        runDir = "assets"
    }
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    //mappings = "stable_20"
    // mappings = "snapshot_20160224"
    mappings = project.config.mappings_version
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    // deobfCompile "applecore:AppleCore:1.8.9-1.3.0+166.beb36:api"

    compile files(
	'lib/BaseMetals/BaseMetals_1.9.4-API-2.3.2.6.jar'
    )

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

def commonManifest = {
    //attributes 'FMLCorePlugin': 'biomesoplenty.common.asm.BOPLoadingPlugin'
    //attributes 'FMLCorePluginContainsFMLMod': 'true'
    //attributes 'ForceLoadAsMod': true
    //attributes 'FMLAT': 'biomesoplenty_at.cfg'
}

jar {
    //manifest commonManifest
    from sourceSets.main.output
    classifier = 'universal'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

/* task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
*/

tasks.build.dependsOn('sourceJar', 'deobfJar', 'jar')


artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}